generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String        @id @default(cuid())
  name             String
  plan             Plan          @default(FREE)
  agentLimit       Int           @default(3)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  validationFields String[]      @default([])
  actions          Action[]
  agents           Agent[]
  articles         Article[]
  callLogs         CallLog[]
  callReasons      CallReason[]
  closingItems     ClosingItem[]
  members          Member[]
}

model Agent {
  id             String                @id @default(cuid())
  name           String
  username       String                @unique
  passwordHash   String
  role           Role                  @default(AGENT)
  orgId          String?
  email          String                @unique
  organization   Organization?         @relation(fields: [orgId], references: [id])
  callLogs       CallLog[]
  validationLogs MemberValidationLog[]
}

model Member {
  id             String                @id @default(cuid())
  memberId       String                @unique
  name           String
  dob            String
  phone          String
  streetAddress  String
  city           String
  state          String
  zipcode        String
  orgId          String
  callLogs       CallLog[]
  organization   Organization          @relation(fields: [orgId], references: [id])
  validationLogs MemberValidationLog[]
}

model Action {
  id               String       @id @default(cuid())
  label            String
  defaultArticleId String?
  orgId            String
  callReasonId     String
  callReason       CallReason   @relation(fields: [callReasonId], references: [id])
  defaultArticle   Article?     @relation(fields: [defaultArticleId], references: [id])
  organization     Organization @relation(fields: [orgId], references: [id])
}

model Article {
  id           String       @id @default(cuid())
  reason       String
  required     String[]
  template     String
  url          String
  fullArticle  String
  orgId        String
  actions      Action[]
  organization Organization @relation(fields: [orgId], references: [id])
  callLogs     CallLog[]
}

model ClosingItem {
  id           String       @id @default(cuid())
  label        String
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
}

model CallReason {
  id           String       @id @default(cuid())
  label        String
  orgId        String
  actions      Action[]
  callLogs     CallLog[]
  organization Organization @relation(fields: [orgId], references: [id])
}

model CallLog {
  id               String       @id @default(cuid())
  orgId            String
  agentId          String
  memberId         String
  reasonId         String
  articleId        String
  actionsTaken     String[]     @db.Text
  closingChecklist String[]     @db.Text
  notes            String
  createdAt        DateTime     @default(now())
  agent            Agent        @relation(fields: [agentId], references: [id])
  article          Article      @relation(fields: [articleId], references: [id])
  member           Member       @relation(fields: [memberId], references: [id])
  org              Organization @relation(fields: [orgId], references: [id])
  callReason       CallReason   @relation(fields: [reasonId], references: [id])
  callSummary      CallSummary?
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String // could be a user ID, agent username, or email
}

model CallSummary {
  id           Int      @id @default(autoincrement())
  callLogId    String   @unique
  orgId        String
  summaryText  String
  actionsTaken String[]
  notes        String
  checklist    String[]
  createdBy    String
  createdAt    DateTime @default(now())
  callLog      CallLog  @relation(fields: [callLogId], references: [id], onDelete: Cascade)
}

model MemberValidationLog {
  id            String   @id @default(cuid())
  orgId         String
  memberId      String
  providedData  Json
  results       Json
  valid         Boolean
  createdBy     String
  createdAt     DateTime @default(now())
  member        Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  agentId       String
  fieldsChecked String[]
  passed        Boolean
  agent         Agent    @relation(fields: [agentId], references: [id])
}

enum Role {
  AGENT
  MANAGER
  TRAINER
  ADMIN
}

enum Plan {
  FREE
  PAID
}
